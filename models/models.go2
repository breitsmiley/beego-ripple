package models

//import (
//	"errors"
//	"strconv"
//	"time"
//)

import (
	"github.com/astaxie/beego/orm"
	_ "github.com/mattn/go-sqlite3"
	"time"
	"fmt"
)

var (
	Models map[string]*User
)

const QUIZ_STATUS_NEW  = 0
const QUIZ_STATUS_OK  = 1
const QUIZ_STATUS_FAIL  = 2

type User struct {
	Id          int `orm:"auto"`
	Email        string
}

type Quiz struct {
	Id    int    `orm:"auto"`
	User  *User  `orm:"rel(fk)"`
	Status int8 `orm:"default(0)"`
	Slug string
	StartedAt time.Time
	AnsweredAt time.Time
}

//type Object struct {
//	ObjectId   string
//	Score      int64
//	PlayerName string
//}

//type User struct {
//	Id       string
//	Username string
//	Password string
//	//Profile  Profile
//}

//func init() {
//	Objects = make(map[string]*Object)
//	Objects["hjkhsbnmn123"] = &Object{"hjkhsbnmn123", 100, "astaxie"}
//	Objects["mjjkxsxsaa23"] = &Object{"mjjkxsxsaa23", 101, "someone"}
//}
//
//func AddOne(object Object) (ObjectId string) {
//	object.ObjectId = "astaxie" + strconv.FormatInt(time.Now().UnixNano(), 10)
//	Objects[object.ObjectId] = &object
//	return object.ObjectId
//}
//
//func GetOne(ObjectId string) (object *Object, err error) {
//	if v, ok := Objects[ObjectId]; ok {
//		return v, nil
//	}
//	return nil, errors.New("ObjectId Not Exist")
//}
//
//func GetAll() map[string]*Object {
//	return Objects
//}
//
//func Update(ObjectId string, Score int64) (err error) {
//	if v, ok := Objects[ObjectId]; ok {
//		v.Score = Score
//		return nil
//	}
//	return errors.New("ObjectId Not Exist")
//}

func Delete2(ObjectId string) {
	delete(Models, ObjectId)
}

func Delete(ObjectId string) {
	delete(Models, ObjectId)
}

